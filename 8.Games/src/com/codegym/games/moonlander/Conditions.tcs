taskKey="com.codegym.games.moonlander.part05"\n\nMoon Lander (Part 5/23)

We will use a game object's properties, such as width and height, quite often. Accordingly, we'll put them in separate variables in the GameObject class.
To allow the object to draw itself on the playing field, we'll add a draw method.
This method will take a Game object as an argument. Now we can set a cell's color on the screen by calling the setCellColor method with the appropriate arguments.
Note that the x and y fields of a GameObject are the coordinates of the upper left corner of its matrix. To render an object's matrix on the playing field,
the following arguments must be passed to the setCellColor method: the object's x + x in the matrix, the object's y + y in the matrix, the color from the matrix.
All of this has already been implemented in the GameObject class. Take a look and figure out what's happening.

In the MoonLanderGame class, we'll create a rocket variable and initialize it in the createGame method.
We'll draw the rocket in drawScene by calling rocket.draw(this);


Requirements:
1.	The MoonLanderGame class must have a private Rocket rocket field.
2.	The rocket field must be initialized with a new Rocket object in the createGame() method before the call to the drawScene() method.
3.	The Rocket class&#39;s constructor must be called with (WIDTH / 2) and 0 as arguments.
4.	In the drawScene() method, after the field is drawn, the draw(Game) method must be called on the rocket. Pass &quot;this&quot; to the method.
5.	The GameObject class must have a statement that imports the entire contents of the com.codegym.engine.cell package.


Moon Lander (Part 4/23)

In addition to coordinates, a game object will have a matrix responsible for the object's appearance. Let's add an int[][] matrix variable to the GameObject class to store it.
And now we'll tackle the lunar landing module.
For simplicity, we'll just call it a rocket. We'll create a Rocket that inherits GameObject, since the rocket is a game object.

Note that we now have a ShapeMatrix helper class, which stores the matrix responsible for the rocket's appearance.



Moon Lander (Part 3/23)

Because Moon Lander will use game objects, let's create a GameObject class, where we'll put all the common properties. At this point, these are x and y coordinates.



Moon Lander (Part 2/23)

Now we'll implement the drawScene() method, where we'll paint all the cells of the playing field the same color.
To help us, we'll use the Game class's setCellColor(int, int, Color) method, whose parameters are the cell coordinates and color.
We'll call it every coordinate from 0 to WIDTH and from 0 to HEIGHT and with any color (for example, Color.ORANGE).

We'll also need the createGame() method. It will be responsible for creating a game.
But for now, we'll only call the drawScene() method in it.
We'll call the createGame() method itself in the initialize() method after the call to setScreenSize(int, int).



Moon Lander (Part 1/23)

Today we invite you to write an exciting game â€” Moon Lander. As always, we'll start with the rules.
The objective is guide a landing module down to the lunar surface. To do this, the player must overcome the Moon's gravitational attraction,
using an aft booster to slow the descent and side thrusters to move the ship left or right.
The terrain is bumpy and there's only one flat area suitable for a soft landing. We'll call it the "platform". If the player lands successfully, he or she wins.
The score depends on how long the landing lasts: The longer a player takes to land, the lower the final score.
The game ends when the player smashes into the surface of the Moon.
Well, let's start with the game's main class: MoonLanderGame.
We'll make it inherit the Game class.

This and other "game engine" classes are contained in the com.codegym.engine.cell package. To use them, the MoonLanderGame class must include the following import:
Now we'll implement the playing field. To do this, we need to override the initialize() method, which in turn must call the setScreenSize(int, int) method.
This method sets the playing field's width and height, which it takes as arguments. We'll store them in variables.

To complete the Moon Lander task successfully, we recommend that you read this article about the "Games" section. It contains information that you'll find helpful when writing games.



