taskKey="com.codegym.games.moonlander.part02"\n\nMoon Lander (Part 2/23)

Now we'll implement the drawScene() method, where we'll paint all the cells of the playing field the same color.
To help us, we'll use the Game class's setCellColor(int, int, Color) method, whose parameters are the cell coordinates and color.
We'll call it every coordinate from 0 to WIDTH and from 0 to HEIGHT and with any color (for example, Color.ORANGE).

We'll also need the createGame() method. It will be responsible for creating a game.
But for now, we'll only call the drawScene() method in it.
We'll call the createGame() method itself in the initialize() method after the call to setScreenSize(int, int).


Requirements:
1.	The MoonLanderGame class must have a private void createGame() method.
2.	The MoonLanderGame class must have a private void drawScene() method.
3.	The drawScene() method must be called in the createGame() method.
4.	The createGame() method must be called in the initialize() method.
5.	In the initialize() method, the call to the createGame() method occurs after the call to the setScreenSize(int, int) method.
6.	In the drawScene() method, call the setCellColor(int, int, Color) method for each cell of the playing field with the following arguments: x and y coordinates of the cell and any color (for example, Color.BLACK).


Moon Lander (Part 1/23)

Today we invite you to write an exciting game â€” Moon Lander. As always, we'll start with the rules.
The objective is guide a landing module down to the lunar surface. To do this, the player must overcome the Moon's gravitational attraction,
using an aft booster to slow the descent and side thrusters to move the ship left or right.
The terrain is bumpy and there's only one flat area suitable for a soft landing. We'll call it the "platform". If the player lands successfully, he or she wins.
The score depends on how long the landing lasts: The longer a player takes to land, the lower the final score.
The game ends when the player smashes into the surface of the Moon.
Well, let's start with the game's main class: MoonLanderGame.
We'll make it inherit the Game class.

This and other "game engine" classes are contained in the com.codegym.engine.cell package. To use them, the MoonLanderGame class must include the following import:
Now we'll implement the playing field. To do this, we need to override the initialize() method, which in turn must call the setScreenSize(int, int) method.
This method sets the playing field's width and height, which it takes as arguments. We'll store them in variables.

To complete the Moon Lander task successfully, we recommend that you read this article about the "Games" section. It contains information that you'll find helpful when writing games.



