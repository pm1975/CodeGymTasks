taskKey="com.codegym.games.racer.part24"\n\nRacer (Part 24/28)

To check the win condition, we'll need to know the actual number of cars that the player has passed.
To do this, create a passedCarsCount field and corresponding getter in the RoadManager class.
The value of this field must increase by one after the player passes each car obstacle (removal of a car from the items list).

We'll compare passedCarsCount and RACE_GOAL_CARS_COUNT in the onTurn(int) method.
If the value of passedCarsCount is greater or equal to RACE_GOAL_CARS_COUNT, then the player has reached the goal and we need to show the finish line.


Requirements:
1.	The RoadManager class must have a private int passedCarsCount field that is initialized to 0 when it is declared.
2.	The RoadManager class must have a public getPassedCarsCount() getter that returns the value of the passedCarsCount field.
3.	The RoadManager class&#39;s deletePassedItems() method must increase the value of the passedCarsCount field by one if an object is removed from the items list and that object is not a spike.
4.	The RacerGame class&#39;s onTurn(int) method must call the finishLine object&#39;s show() method if the value returned by the roadManager.getPassedCarsCount() method is greater than or equal to RACE_GOAL_CARS_COUNT.
5.	In the RacerGame class&#39;s onTurn(int) method, the finishLine object&#39;s show() method must called before moveAll().


Racer (Part 23/28)

In this part of the project, we'll draw and move the finish line. To do this, an instance must be stored in the game's main class and recreated when a new game starts.
Like the methods of our other objects, the FinishLine class's draw(Game) and move(int) methods will be called every 40 ms, but the results of these method calls will be ignored until the show() method is called.
Let's also determine the conditions necessary for a win. To make the game challenging and interesting, a win should happen after the player clears 40 car obstacles.
We'll store this value in the RACE_GOAL_CARS_COUNT constant.



Racer (Part 22/28)

Let's move on to creating the finish line. A matrix for it is already in ShapeMatrix.
The finish line appears on the race track at the end of the game.
Actually, the object representing the finish line is created at the beginning of the game, but it is located beyond
the playing field, so it is not visible.
As soon as the flag responsible for the FinishLine object's visibility becomes true, the finish line starts to move down
and appears on the playing field.



Racer (Part 21/28)

Let's make the game a little harder. Let's add a car whose driver is "drunk".
To represent it on the playing field, the MovingCar class has been added to the road package. Use it to create these cars.
Unlike ordinary cars, a car operated by a "drunk" driver will drift horizontally.
To prevent it from hitting other cars, the MovingCar class's move() method checks for such collisions.
To do this, in addition to the speed, you need to pass the list of all obstacle objects to the move(int boost) method.

There is another nuance: MovingCar inherits RoadObject and overrides its move method, so you'll also have to add a second parameter to the move method in the parent class.

When there are a lot of "drunk" drivers on the race track, the game becomes too difficult, so ensure that there is only one such car on the race track at a time.
To check this, implement the movingCarExists() method by analogy with the spikeExists() method.

The void generateMovingCar(Game) method will be responsible for generating MovingCar objects.
Its implementation is analogous to the generateSpike(Game) method.



Racer (Part 20/28)

There are currently too many oncoming cars. To make it possible to win the game, there must be adequate spaces between obstacles.
That said, if they are too big, then the game will become too easy and not very interesting.
The optimal distance is 12, which is slightly larger than the dimensions of the player's car.
We'll store this value in the PLAYER_CAR_DISTANCE constant.

Implement a boolean isRoadSpaceFree(RoadObject object) method that checks whether there is enough room on the road to place a new car.
The isCollisionWithDistance(GameObject, int) method will help you with this. This method returns false if the horizontal and vertical distance between objects is greater than the passed distance.
If the road has enough free space, add a new car to items.



Racer (Part 19/28)

In addition to spikes, it would be nice to see various types of cars on the race track.
To represent cars on the playing field, in the road package, create a Car class that will be common to all types of cars and make it inherit RoadObject.
All cars will move at a speed of 1.

Because the RoadManager class's createRoadObject(RoadObjectType, int, int) method is responsible for creating all road objects, it must return a new Car object instead of null.
To generate new cars, create a generateRegularCar(Game game) method in the RoadManager class.
To avoid excessively crowding the race track, a new car should be created with a 30% probability.
The type of car must be randomly selected from the first four fields of the RoadObjectType enum.
Don't forget to add each generated car to the items list.



