taskKey="com.codegym.games.racer.part08"\n\nRacer (Part 8/28)

The dashed lines must move to create the illusion that the car is moving. The car itself will always be located below the game field.
We'll give the car a field responsible for speed. Its value will be passed to roadMarking.move(int) and indicates how much the markings need to move.
In RacerGame, we'll create a moveAll() method that will move all movable game objects (for now, only the marking). moveAll() must be called every 40 ms. To do this, in RacerGame you need to override the onTurn(int) and set the interval in the createGame() method.

You can read about how to work with the onTurn(int) method in the description of the game engine:
https://codegym.cc/groups/posts/139-games-section-on-codegym-event-handling


Requirements:
1.	The PlayerCar class must have a public int speed field that is initialized to 1 when it is declared.
2.	The RacerGame class must have a private void moveAll() method.
3.	In the moveAll() method, the move(int) method must be called on the roadMarking object. Pass the player&#39;s speed to the method.
4.	In the RacerGame class, the onTurn(int) method of the Game parent class must be overridden.
5.	The moveAll() method must be called in the onTurn(int) method.
6.	In the onTurn(int) method, the drawScene() method must be called after the call to moveAll() method.
7.	In the RacerGame class&#39;s createGame() method, the Game class&#39;s setTurnTimer(int) method must be called with 40 as the argument.


Racer (Part 7/28)

Now we'll create the player's car.
Let's create a PlayerCar class and make it inherit GameObject:
At first, the player's car will be in the third lane, one position above the bottom edge of the playing field.
Accordingly, the x coordinate will be equal to RacerGame.WIDTH/2 + 2, and the y coordinate will be RacerGame.HEIGHT - playerCarHeight - 1.
A matrix for the car is already in ShapeMatrix. In order to reference the player's car, an instance of PlayerCar must be stored in the player variable in the RacerGame class. Call the draw(Game) method on the car to see it on the playing field.



Racer (Part 6/28)

The road, shoulders, and dividing line are stationary objects: they do not move.
Motion will be simulated by other game objects. We don't have cars yet. For now, only two dashed lines on the road will move.
Other road markings will be represented by a separate class. You don't need to create it. You have the RoadMarking class in
your game package. Take a look at the code of this class. In addition to a constructor, RoadMarking has 2 other methods: move(int) - responsible for movement annd draw(Game) - responsible for drawing the object. At this stage, we'll only implement the drawing. The draw(Game) method takes the object that should be drawn on. In our case, it is the current instance of the RacerGame class, i.e. this.
You also now have a ShapeMatrix class that stores int matrices containing images of game objects.
The numbers in the matrix represent the ordinals of colors in the Color enum. Thanks to the image matrices, the object knows what
color to paint each cell. ShapeMatrix currently only has a matrix for the road's dashed line, but in the future other objects' images
will be added as well.
Give the RacerGame class a RoadMarking field, initialize it in the createGame() method, and draw it in the drawScene() method.
The dashed line must be drawn after (on top of) the stationary objects.



Racer (Part 5/28)

Create a GameObject class to represent game objects. All game objects will have the following common properties:
- int x, int y — coordinates of the object's upper left corner on the playing field;
- int[][] matrix — matrix for displaying the game object. The matrix values are the ordinals of the colors in the Color enum.
To get the color, use Color.values()[matrix[i][j]], where:
i is the y coordinate in the matrix,
j is the x coordinate in the matrix.
- int height, int width — The height and width match the dimensions of the matrix.
An object must also have a method that draws it.



Racer (Part 4/28)

During the game, many objects will appear, move about the playing field, and sometimes leave it.
If the setCellColor(int, int, Color) method is called with coordinates outside the bounds of the playing field, an exception
will be thrown. To avoid this, override it so that the superclass's method is only called with coordinates that lie within the playing field.
Hint: to call the superclass's method, use the super keyword.



Racer (Part 3/28)

Let's proceed to drawing the race track in the drawField() method.
To set the color of a specific cell, use the setCellColor(int, int, Color) method. The passed arguments are the x and y coordinates and the color.
Keep in mind that the playing field consists of three zones that must be painted using different colors:
1. The shoulder is the side of the playing field, where things don't move.
Height: the entire height of the playing field;
Width: from 0 to ROADSIDE_WIDTH (not inclusive) and from WIDTH - ROADSIDE_WIDTH (inclusive) to WIDTH.
2. The road is the roadway where cars move.
Height: the entire height of the playing field;
Width: from ROADSIDE_WIDTH (inclusive) to WIDTH - ROADSIDE_WIDTH (not inclusive), excluding CENTER_X.
3. The dividing line is a white stripe that divides lanes.
Height: the entire height of the playing field;
Width: 1 cell of the playing field, where x = CENTER_X.
The painting happens in a loop:
The result should be a race track that looks something like this:
api/1.0/rest/images/78/39ad56b3-2702-4b6f-8a84-ee937b8a0433?size=0
P.S. You can choose whatever colors you like.



