taskKey="com.codegym.games.racer.part19"\n\nRacer (Part 19/28)

In addition to spikes, it would be nice to see various types of cars on the race track.
To represent cars on the playing field, in the road package, create a Car class that will be common to all types of cars and make it inherit RoadObject.
All cars will move at a speed of 1.

Because the RoadManager class's createRoadObject(RoadObjectType, int, int) method is responsible for creating all road objects, it must return a new Car object instead of null.
To generate new cars, create a generateRegularCar(Game game) method in the RoadManager class.
To avoid excessively crowding the race track, a new car should be created with a 30% probability.
The type of car must be randomly selected from the first four fields of the RoadObjectType enum.
Don't forget to add each generated car to the items list.


Requirements:
1.	There must be a public Car class in the road package.
2.	The Car class must inherit the RoadObject class.
3.	The Car class must have a public constructor with three parameters: RoadObjectType type, int x, int y. It must call the base class constructor with the following arguments: type, x, y.
4.	In the Car class&#39;s constructor, the speed field (inherited from the parent class) must be initialized to 1.
5.	The RoadManager class&#39;s createRoadObject(RoadObjectType, int, int) method must return a new Car object if type is not equal to RoadObjectType.SPIKE.
6.	The createRoadObject(RoadObjectType, int, int) method must call the Car class&#39;s constructor with the method&#39;s type, x, and y parameters.
7.	The RoadManager class must have a private void generateRegularCar(Game) method.
8.	In the generateRegularCar(Game game) method, you need to call the game object&#39;s getRandomNumber(int) method with the argument 100.
9.	The generateRegularCar(Game game) method must declare a local int carTypeNumber variable, initialized to game.getRandomNumber(4).
10.	In the generateRegularCar(Game game) method, if getRandomNumber(100) returns a number less than 30, you need to call the addRoadObject(RoadObjectType, Game) method with the following arguments: RoadObjectType.values()[carTypeNumber], game.
11.	The RoadManager class&#39; generateNewRoadObjects(Game) method must call the generateRegularCar(Game) method.


Racer (Part 18/28)

After the game is over, the player must be able to start a new game. Implement the ability to restart the game by pressing the SPACE key.

To allow the player to cover the race track faster, his or her car must be able to accelerate.
Implement the ability to double the speed by pressing the UP key. Releasing this key must return the car to the initial speed.



Racer (Part 17/28)

The game must stop in two cases: when the player wins or when the player loses. For now, we'll only stop the game for losses.
To save the current game state, we'll create a boolean isGameStopped field whose initial value must be false.

When the player hits an obstacle, he or she loses. This means that the player must be stopped, and a message, such as GAME OVER,
must be displayed on the screen.
It is convenient to put all the actions associated with a lose in a separate gameOver() method.
The onTurn(int) method must check whether the player has collided with any obstacles (checkCrash(PlayerCar) method).



Racer (Part 16/28)

Currently, the player's car continues to move after colliding with an obstacle. In this part of the project,
we'll implement a method that will check whether the car has hit an obstacle.
When implementing this method, use the GameObject class's isCollision(GameObject) method, which we have implemented for you.
Figure out how it works.

Collisions should be visibly noticeable, i.e. we need to change the image used to display the player's car.
To do this, give the PlayerCar class a stop() method that sets the matrix field to ShapeMatrix.PLAYER_DEAD.



Racer (Part 15/28)

Currently, spikes appear only once (at the beginning of the game). To generate a new spike, the old spike must be removed
from the items list after its leaves the screen. To remove the spike, you can either use an iterator, or
create a copy of the items list and run through it in a loop. If an object needs to be removed, call items.remove(item).



Racer (Part 14/28)

The time has come to draw the spike on the screen.

There must not be more than one Spike object on the screen at the same time.
To check this condition, create a spikeExists() method in the RoadManager class.
To check whether the RoadObject is a spike, you can use its type field.

The void generateSpike(Game) method will be responsible for generating spikes.
It will check whether there is a spike on the road. If not, then a new spike is generated with a 10% probability.
In the future, things other than spikes may be obstacles. We'll need the generateNewRoadObjects(Game) method to generate all different kinds of obstacles, but for now it will only generate spikes. It must be called in the RacerGame class's onTurn(int) method.

Additionally, the spike must move together with the race track in the moveAll() method.



