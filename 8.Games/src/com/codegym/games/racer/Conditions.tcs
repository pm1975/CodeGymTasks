taskKey="com.codegym.games.racer.part06"\n\nRacer (Part 6/28)

The road, shoulders, and dividing line are stationary objects: they do not move.
Motion will be simulated by other game objects. We don't have cars yet. For now, only two dashed lines on the road will move.
Other road markings will be represented by a separate class. You don't need to create it. You have the RoadMarking class in
your game package. Take a look at the code of this class. In addition to a constructor, RoadMarking has 2 other methods: move(int) - responsible for movement annd draw(Game) - responsible for drawing the object. At this stage, we'll only implement the drawing. The draw(Game) method takes the object that should be drawn on. In our case, it is the current instance of the RacerGame class, i.e. this.
You also now have a ShapeMatrix class that stores int matrices containing images of game objects.
The numbers in the matrix represent the ordinals of colors in the Color enum. Thanks to the image matrices, the object knows what
color to paint each cell. ShapeMatrix currently only has a matrix for the road's dashed line, but in the future other objects' images
will be added as well.
Give the RacerGame class a RoadMarking field, initialize it in the createGame() method, and draw it in the drawScene() method.
The dashed line must be drawn after (on top of) the stationary objects.


Requirements:
1.	The RacerGame class must have a private RoadMarking roadMarking field.
2.	The roadMarking field must be initialized with a new RoadMarking object in the createGame() method before the call to the drawScene() method.
3.	In the drawScene() method, the draw(Game) method must be called on the roadMarking object. Pass this to the method.
4.	In the drawScene() method, the roadMarking.draw(Game) method must be called after the call to the drawField() method.


Racer (Part 5/28)

Create a GameObject class to represent game objects. All game objects will have the following common properties:
- int x, int y — coordinates of the object's upper left corner on the playing field;
- int[][] matrix — matrix for displaying the game object. The matrix values are the ordinals of the colors in the Color enum.
To get the color, use Color.values()[matrix[i][j]], where:
i is the y coordinate in the matrix,
j is the x coordinate in the matrix.
- int height, int width — The height and width match the dimensions of the matrix.
An object must also have a method that draws it.



Racer (Part 4/28)

During the game, many objects will appear, move about the playing field, and sometimes leave it.
If the setCellColor(int, int, Color) method is called with coordinates outside the bounds of the playing field, an exception
will be thrown. To avoid this, override it so that the superclass's method is only called with coordinates that lie within the playing field.
Hint: to call the superclass's method, use the super keyword.



Racer (Part 3/28)

Let's proceed to drawing the race track in the drawField() method.
To set the color of a specific cell, use the setCellColor(int, int, Color) method. The passed arguments are the x and y coordinates and the color.
Keep in mind that the playing field consists of three zones that must be painted using different colors:
1. The shoulder is the side of the playing field, where things don't move.
Height: the entire height of the playing field;
Width: from 0 to ROADSIDE_WIDTH (not inclusive) and from WIDTH - ROADSIDE_WIDTH (inclusive) to WIDTH.
2. The road is the roadway where cars move.
Height: the entire height of the playing field;
Width: from ROADSIDE_WIDTH (inclusive) to WIDTH - ROADSIDE_WIDTH (not inclusive), excluding CENTER_X.
3. The dividing line is a white stripe that divides lanes.
Height: the entire height of the playing field;
Width: 1 cell of the playing field, where x = CENTER_X.
The painting happens in a loop:
The result should be a race track that looks something like this:
api/1.0/rest/images/78/39ad56b3-2702-4b6f-8a84-ee937b8a0433?size=0
P.S. You can choose whatever colors you like.



Racer (Part 2/28)

Now we'll prepare the playing field.
In this part, we'll create variables and methods that we'll use in the future to draw the road and road markings.
A dividing line will be placed in the middle of the road. The value of its x coordinate will be half of
the width of the playing field and will be stored in the CENTER_X variable.
Shoulders will be placed along the sides of the road. They will be 14 cells wide.
This value will be stored in the ROADSIDE_WIDTH variable.

We'll create helper methods:
createGame() - for starting a new game;
drawScene() - for drawing all the game objects;
drawField() - for drawing the playing field's background.



Racer (Part 1/28)

We invite you to write an exciting game — Racer. We'll start with the rules.
1. The objective of the game is to reach the finish line by driving a race car on a busy race track.
2. The score depends on how long the race lasts: the sooner a player finishes, the higher his or her score.
3. The game is over when the player hits another car or an obstacle.

Let's create the game's main class: RacerGame. To make use of the game engine, we'll make our class inherit the Game
class, which has methods for implementing the game. To start, we need a playing field (64x64) to which we'll add game objects.
Because the field's width and height will be used often in the game logic, it makes sense to create WIDTH and HEIGHT constants.
Before the game starts, the initialize() method runs. Its purpose is to set up the game's initial state. You need to override it in the RacerGame class.

In the initialize() method, you need to:
1. set the dimensions of the playing field by calling setScreenSize(WIDTH, HEIGHT);
2. disable display of the grid by calling showGrid(false).
To complete the Racer task successfully, we recommend that you read this article about the "Games" section. It contains information that you'll find helpful when writing games.


