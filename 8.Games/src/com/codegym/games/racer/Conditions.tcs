taskKey="com.codegym.games.racer.part02"\n\nRacer (Part 2/28)

Now we'll prepare the playing field.
In this part, we'll create variables and methods that we'll use in the future to draw the road and road markings.
A dividing line will be placed in the middle of the road. The value of its x coordinate will be half of
the width of the playing field and will be stored in the CENTER_X variable.
Shoulders will be placed along the sides of the road. They will be 14 cells wide.
This value will be stored in the ROADSIDE_WIDTH variable.

We'll create helper methods:
createGame() - for starting a new game;
drawScene() - for drawing all the game objects;
drawField() - for drawing the playing field's background.


Requirements:
1.	The RacerGame class must have a public static final int CENTER_X field, initialized to WIDTH / 2 when it is declared.
2.	The RacerGame class must have a public static final int ROADSIDE_WIDTH field, initialized to 14 when it is declared.
3.	The RacerGame class must have a private void createGame() method.
4.	The RacerGame class must have a private void drawScene() method.
5.	The drawScene() method must be called in the createGame() method.
6.	The createGame() method must be called in the initialize() method.
7.	In the initialize() method, the call to the createGame() method must be after the call to the setScreenSize(int, int) method.
8.	The RacerGame class must have a private void drawField() method.
9.	The drawField() method must be called in the drawScene() method.


Racer (Part 1/28)

We invite you to write an exciting game â€” Racer. We'll start with the rules.
1. The objective of the game is to reach the finish line by driving a race car on a busy race track.
2. The score depends on how long the race lasts: the sooner a player finishes, the higher his or her score.
3. The game is over when the player hits another car or an obstacle.

Let's create the game's main class: RacerGame. To make use of the game engine, we'll make our class inherit the Game
class, which has methods for implementing the game. To start, we need a playing field (64x64) to which we'll add game objects.
Because the field's width and height will be used often in the game logic, it makes sense to create WIDTH and HEIGHT constants.
Before the game starts, the initialize() method runs. Its purpose is to set up the game's initial state. You need to override it in the RacerGame class.

In the initialize() method, you need to:
1. set the dimensions of the playing field by calling setScreenSize(WIDTH, HEIGHT);
2. disable display of the grid by calling showGrid(false).
To complete the Racer task successfully, we recommend that you read this article about the "Games" section. It contains information that you'll find helpful when writing games.


