taskKey="com.codegym.games.racer.part21"\n\nRacer (Part 21/28)

Let's make the game a little harder. Let's add a car whose driver is "drunk".
To represent it on the playing field, the MovingCar class has been added to the road package. Use it to create these cars.
Unlike ordinary cars, a car operated by a "drunk" driver will drift horizontally.
To prevent it from hitting other cars, the MovingCar class's move() method checks for such collisions.
To do this, in addition to the speed, you need to pass the list of all obstacle objects to the move(int boost) method.

There is another nuance: MovingCar inherits RoadObject and overrides its move method, so you'll also have to add a second parameter to the move method in the parent class.

When there are a lot of "drunk" drivers on the race track, the game becomes too difficult, so ensure that there is only one such car on the race track at a time.
To check this, implement the movingCarExists() method by analogy with the spikeExists() method.

The void generateMovingCar(Game) method will be responsible for generating MovingCar objects.
Its implementation is analogous to the generateSpike(Game) method.


Requirements:
1.	The RoadObject class&#39;s void move() method must take two arguments: the car speed and a list RoadObjects.
2.	In the RoadManager class&#39;s void move(int boost) method, the move() method must be called with two arguments on RoadObjects: first &mdash; the sum of boost and the object&#39;s speed, second &mdash; the items list.
3.	The RoadManager class&#39;s createRoadObject(RoadObjectType, int, int) method must return a new MovingCar object if type is equal to RoadObjectType.DRUNK_CAR.
4.	The RoadManager class must have a private boolean movingCarExists() method.
5.	The movingCarExists() method must return true if there is a MovingCar object in the items list. Otherwise, it should return false.
6.	The RoadManager class must have a private void generateMovingCar(Game) method.
7.	In the generateMovingCar(Game game) method, you need to call the game object&#39;s getRandomNumber(int) method with the argument 100.
8.	In the generateMovingCar(Game game) method, if the getRandomNumber(int) method returns a number less than 10 and the movingCarExists() method returns false, you need to call the addRoadObject(RoadObjectType, Game) method with the following arguments: RoadObjectType.DRUNK_CAR, game.
9.	The RoadManager class&#39;s generateNewRoadObjects(Game) method must call the generateMovingCar(Game) method.


Racer (Part 20/28)

There are currently too many oncoming cars. To make it possible to win the game, there must be adequate spaces between obstacles.
That said, if they are too big, then the game will become too easy and not very interesting.
The optimal distance is 12, which is slightly larger than the dimensions of the player's car.
We'll store this value in the PLAYER_CAR_DISTANCE constant.

Implement a boolean isRoadSpaceFree(RoadObject object) method that checks whether there is enough room on the road to place a new car.
The isCollisionWithDistance(GameObject, int) method will help you with this. This method returns false if the horizontal and vertical distance between objects is greater than the passed distance.
If the road has enough free space, add a new car to items.



Racer (Part 19/28)

In addition to spikes, it would be nice to see various types of cars on the race track.
To represent cars on the playing field, in the road package, create a Car class that will be common to all types of cars and make it inherit RoadObject.
All cars will move at a speed of 1.

Because the RoadManager class's createRoadObject(RoadObjectType, int, int) method is responsible for creating all road objects, it must return a new Car object instead of null.
To generate new cars, create a generateRegularCar(Game game) method in the RoadManager class.
To avoid excessively crowding the race track, a new car should be created with a 30% probability.
The type of car must be randomly selected from the first four fields of the RoadObjectType enum.
Don't forget to add each generated car to the items list.



Racer (Part 18/28)

After the game is over, the player must be able to start a new game. Implement the ability to restart the game by pressing the SPACE key.

To allow the player to cover the race track faster, his or her car must be able to accelerate.
Implement the ability to double the speed by pressing the UP key. Releasing this key must return the car to the initial speed.



Racer (Part 17/28)

The game must stop in two cases: when the player wins or when the player loses. For now, we'll only stop the game for losses.
To save the current game state, we'll create a boolean isGameStopped field whose initial value must be false.

When the player hits an obstacle, he or she loses. This means that the player must be stopped, and a message, such as GAME OVER,
must be displayed on the screen.
It is convenient to put all the actions associated with a lose in a separate gameOver() method.
The onTurn(int) method must check whether the player has collided with any obstacles (checkCrash(PlayerCar) method).



Racer (Part 16/28)

Currently, the player's car continues to move after colliding with an obstacle. In this part of the project,
we'll implement a method that will check whether the car has hit an obstacle.
When implementing this method, use the GameObject class's isCollision(GameObject) method, which we have implemented for you.
Figure out how it works.

Collisions should be visibly noticeable, i.e. we need to change the image used to display the player's car.
To do this, give the PlayerCar class a stop() method that sets the matrix field to ShapeMatrix.PLAYER_DEAD.



