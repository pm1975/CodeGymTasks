taskKey="com.codegym.games.racer.part13"\n\nRacer (Part 13/28)

The RoadManager class's name isn't arbitrary: it manages all the obstacles on the road.
It must know how to draw and move all the stored objects.

In the RacerGame class, create a RoadManager roadManager field so you can access it.
Initialize the roadManager field in createGame(), and call draw(Game) on it in drawScene().


Requirements:
1.	The RoadManager class must have a public void draw(Game) method.
2.	In the RoadManager class&#39;s draw(Game) method, call the draw(Game) method on each object in the items list.
3.	The RoadManager class must have a public void move(int boost) method.
4.	In the RoadManager class&#39;s move(int) method, call the move method on each object in the items list. Pass the sum of boost and the object&#39;s speed as the argument.
5.	The RacerGame class must have a private RoadManager roadManager field.
6.	The roadManager field must be initialized with a new RoadManager object in the createGame() method before the call to the drawScene() method.
7.	In the drawScene() method, the draw(Game) method must be called on the roadManager object. Pass this to the method.
8.	In the drawScene() method, the draw(Game) method must be called on the roadManager object after the drawField() method.


Racer (Part 12/28)

Obstacles must appear at random locations on the road.

Add two constants to the RoadManager class: FIRST_LANE_POSITION and FOURTH_LANE_POSITION — the far left and far right road positions
of the x coordinates of the obstacles' matrices. Assign them the values 16 and 44 respectively.

Additionally, the RoadManager class must have a list of all current obstacle objects.

In the same class, create a addRoadObject(RoadObjectType, Game) method that generates a position for a new obstacle and adds it
to the list of all obstacle objects. The obstacle's coordinates must be generated as follows:

x = game.getRandomNumber(FIRST_LANE_POSITION, FOURTH_LANE_POSITION) — a random lane number;
y = -1 * RoadObject.getHeight(type) — initially, the object is placed beyond the playing field so that it makes a smooth appearance.



Racer (Part 11/28)

The player will face various obstacles on the road: other cars driving the wrong way, and spikes that don't move relative
to the race track. These obstacles will inherit the RoadObject class. The types of all possible obstacles are listed in the
RoadObjectType enum. You now have access to these classes in the road package. And new matrices for displaying obstacles
have been added to the ShapeMatrix class. Take a look at the RoadObject class and its methods.

At this stage, we'll implement the spikes. Create a Spike class and make it inherit RoadObject. To create instances of obstacles,
in the RoadManager class, create a private RoadObject createRoadObject(RoadObjectType type, int x, int y) method that will
create and return a new obstacle based on the passed arguments.
We currently only have one type of obstacle: Spike, so if the createRoadObject method receives any other type as an argument,
it should return null. Since we know the game object's type, there is no need to pass an image matrix to its constructor.
Accordingly, the GameObject class will need one more constructor with two int parameters (int x, int y), which are used to
initialize the x and y fields.



Racer (Part 10/28)

The car's behavior currently doesn't match what we would expect:
- the car doesn't stop moving to the side when an arrow key is released;
- the car drives right off the edge of the road and the playing field.
To fix this, you need to implement the correct behavior for the car when the RIGHT and LEFT keys are released.
Override the onKeyReleased(Key) method and there set the car's direction to Direction.NONE when this is necessary.
Create a RoadManager class in the road package in order to manage the flow of items on the road. Give it fields that will store the x coordinates of the edges of the driving surface.
Use them in the PlayerCar class's move() method to prevent the car from leaving the road.
If you check the road boundary before changing the x coordinate of the player's car, it will be able to put one wheel on the shoulder. But if you change x first and then check the boundary, the player's car will be strictly limited to the race track.
The choice is yours.



Racer (Part 9/28)

Along the horizontal axis, the car can move right, left, or not at all. To indicate these directions, create a Direction
enum with the following fields. RIGHT, LEFT, NONE.
The player's car must have a field that stores the direction of motion (Direction direction).
We'll access it through a getter and setter.
In the PlayerCar class, create a move() method that changes the car's coordinates along the horizontal axis depending on its
direction of motion. This method will be called in moveAll().
To handle key presses, override the onKeyPress(Key) method. Depending on which key is pressed, use a setter to set
the appropriate direction of the player's car.



Racer (Part 8/28)

The dashed lines must move to create the illusion that the car is moving. The car itself will always be located below the game field.
We'll give the car a field responsible for speed. Its value will be passed to roadMarking.move(int) and indicates how much the markings need to move.
In RacerGame, we'll create a moveAll() method that will move all movable game objects (for now, only the marking). moveAll() must be called every 40 ms. To do this, in RacerGame you need to override the onTurn(int) and set the interval in the createGame() method.

You can read about how to work with the onTurn(int) method in the description of the game engine:
https://codegym.cc/groups/posts/139-games-section-on-codegym-event-handling



