taskKey="com.codegym.games.minesweeper.part10"\n\nMinesweeper (Part 10/16)

Now let's tackle the method responsible for flagging a cell. We'll call it markTile.
It must:
- mark a cell on the playing field with a flag, or remove a flag from a cell;
- track the number of flags;
- handle drawing and erasing flags on the playing field;
- change the a cell's color if a flag is being set and restore the original color if a flag is being removed.
You can set or remove a flag in the game by clicking the right mouse button. Therefore, in the MinesweeperGame class,
you need to override the Game class's onMouseRightClick(int, int) method and call the markTile(int x, int y) method.
Check that everything works â€” run the game.


Requirements:
1.	The MinesweeperGame class must have a private void markTile(int, int) method.
2.	The markTile(int x, int y) method must not do anything if the element is already revealed (isOpen == true).
3.	The markTile(int, int) method must not do anything if the number of unused flags (countFlags) is zero and the current element is not a flag (isFlag = false).
4.	The markTile(int, int) method must set the isFlag field to true, reduce the number of unused flags by one, draw the FLAG symbol on the field if the current element is not a flag (use the setCellValue(int, int, String) method), and change the cell background on the field (use the setCellColor(int, int, Color) method). For example, to Color.YELLOW.
5.	The markTile(int, int) method must set the isFlag field to false, increase the number of unused flags by one, draw an empty cell on the field if the current element is a flag (use the setCellValue(int, int, String) method), and change the cell background on the field (use the setCellColor(int, int, Color) method).
6.	The MinesweeperGame class must override the Game parent class&#39;s onMouseRightClick(int, int) method.
7.	The onMouseRightClick(int, int) method must call the markTile(int, int) method.


Minesweeper (Part 9/16)

According to the rules, when a cell without adjacent mines is revealed,
the game reveals the "unmined" area up to cells with mined
neighbors. Let's implement it... I suggest using recursion. It is used
when the algorithm for solving the problem is the same as the algorithm for solving part of the problem. Here's what we have.
When a cell with zero mined neighbors is revealed, we need to do a full search of all
neighboring cells that haven't been revealed, call openTile(int, int) method on them, and repeat the process.
Additionally, in the openTile(int, int) method, we'll arrange to display the number of mined neighbors of a cell.
Run the game to verify that the implementation is correct.
Hint: if you get a java.lang.StackOverflowError, it means that you're setting the isOpen flag too late.



Minesweeper (Part 8/16)

The rules of the game provide flags to help the player. They are needed to
mark cells that might be mined. Accordingly, the number of flags (countFlags) must be equal to
the number of mines (countMinesOnField). You need to show flags somehow on the playing field. To do this, we'll create
a constant to hold the symbol that represents them. Each cell in the model must have an
isFlag field that will tell us whether a cell is flagged.



Minesweeper (Part 7/16)

At this stage, we'll deal with the logic to reveal cells. Let's create a corresponding method
and a variable that will store the cell state (revealed or hidden). When revealing a cell, the method will:
- draw a mine in the cell if it contains a mine;
- display the number of mined neighbors if the cell does not contain a mine;
- mark the cell as revealed in the model;
- change the cell color.
For convenience, we suggest adding the mine symbol to a separate constant. When the a cell be revealed? Correct!
When you click on it with the left mouse button. To handle this click event, the engine has a special method: onMouseLeftClick(int, int).
Let's override it in our class. It will call the method that reveals a cell.
And, of course, run the program and enjoy the results of your work.



Minesweeper (Part 6/16)

Now let's count the mines in adjacent cells. To do this, we'll add a field to each cell of the matrix,
which will be responsible for the number of mined neighbors. First, we find all the neighbors,
and then we count how many of them are mined.
To get the list of neighbors, you now have the getNeighbors() method, which has one GameObject (cell) parameter.
Your task is to, in a separate method, count the number of mined neighbors for each cell in gameField
and assign this value to the appropriate field of the cell.
Although your work is not visible (you started program to see what happens, right?), it is very important to future steps.



Minesweeper (Part 5/16)

Minesweeper is aptly named. The player has to deal with mines, though maybe it would be best for the player to stay far away from them :)
Let's add these mines to the game. To do this, we'll adapt the GameObject class to account
for the fact that a cell can be a mine (by adding the isMine flag).
Don't create a new constructor: editing the existing constructor will suffice.
Additionally, when creating the cells, add code that generates mines with a probability of 10%. The easiest way is
to use the Game class's getRandomNumber(int n) method, which returns a random number from
0 to n-1 inclusive. Therefore, the probability of generating a certain number is 1/n.
And don't forget to count the number of generated mines in the MinesweeperGame class.
Once you've done all that, run the program and check that nothing is broken :)



