taskKey="com.codegym.games.minesweeper.part09"\n\nMinesweeper (Part 9/16)

According to the rules, when a cell without adjacent mines is revealed,
the game reveals the "unmined" area up to cells with mined
neighbors. Let's implement it... I suggest using recursion. It is used
when the algorithm for solving the problem is the same as the algorithm for solving part of the problem. Here's what we have.
When a cell with zero mined neighbors is revealed, we need to do a full search of all
neighboring cells that haven't been revealed, call openTile(int, int) method on them, and repeat the process.
Additionally, in the openTile(int, int) method, we'll arrange to display the number of mined neighbors of a cell.
Run the game to verify that the implementation is correct.
Hint: if you get a java.lang.StackOverflowError, it means that you're setting the isOpen flag too late.


Requirements:
1.	In the openTile(int, int) method, if the element is not a mine and has no mined neighbors, the openTile(int, int) method must be called recursively on each neighbor that hasn&#39;t been revealed.
2.	The openTile(int, int) method must call the getNeighbors(GameObject) method if the element is not a mine and has no mined neighbors.
3.	In the openTile(int, int) method, if the element is not a mine and has at least one mined neighbor, the number of mined neighbors must be displayed on the playing field. Use the setCellNumber(int, int, int) method.
4.	The openTile(int, int) method must not display anything if the element is not a mine and has no mined neighbors. Use an empty string.


Minesweeper (Part 8/16)

The rules of the game provide flags to help the player. They are needed to
mark cells that might be mined. Accordingly, the number of flags (countFlags) must be equal to
the number of mines (countMinesOnField). You need to show flags somehow on the playing field. To do this, we'll create
a constant to hold the symbol that represents them. Each cell in the model must have an
isFlag field that will tell us whether a cell is flagged.



Minesweeper (Part 7/16)

At this stage, we'll deal with the logic to reveal cells. Let's create a corresponding method
and a variable that will store the cell state (revealed or hidden). When revealing a cell, the method will:
- draw a mine in the cell if it contains a mine;
- display the number of mined neighbors if the cell does not contain a mine;
- mark the cell as revealed in the model;
- change the cell color.
For convenience, we suggest adding the mine symbol to a separate constant. When the a cell be revealed? Correct!
When you click on it with the left mouse button. To handle this click event, the engine has a special method: onMouseLeftClick(int, int).
Let's override it in our class. It will call the method that reveals a cell.
And, of course, run the program and enjoy the results of your work.



Minesweeper (Part 6/16)

Now let's count the mines in adjacent cells. To do this, we'll add a field to each cell of the matrix,
which will be responsible for the number of mined neighbors. First, we find all the neighbors,
and then we count how many of them are mined.
To get the list of neighbors, you now have the getNeighbors() method, which has one GameObject (cell) parameter.
Your task is to, in a separate method, count the number of mined neighbors for each cell in gameField
and assign this value to the appropriate field of the cell.
Although your work is not visible (you started program to see what happens, right?), it is very important to future steps.



Minesweeper (Part 5/16)

Minesweeper is aptly named. The player has to deal with mines, though maybe it would be best for the player to stay far away from them :)
Let's add these mines to the game. To do this, we'll adapt the GameObject class to account
for the fact that a cell can be a mine (by adding the isMine flag).
Don't create a new constructor: editing the existing constructor will suffice.
Additionally, when creating the cells, add code that generates mines with a probability of 10%. The easiest way is
to use the Game class's getRandomNumber(int n) method, which returns a random number from
0 to n-1 inclusive. Therefore, the probability of generating a certain number is 1/n.
And don't forget to count the number of generated mines in the MinesweeperGame class.
Once you've done all that, run the program and check that nothing is broken :)



Minesweeper (Part 4/16)

We need to store the state of the playing field's cells somewhere.
To do this, create a matrix (two-dimensional array) with the dimensions of the playing field.
Populate the matrix with GameObject objects using this formula:
gameField[y][x] = new GameObject(x, y);

Now let's display all the cells on the screen.
The Game class's setCellColor(int, int, Color) method, whose parameters are the cell coordinates and color, will help us accomplish this.
Call it for each cell and pass the cell coordinates and any color (for example, Color.ORANGE) as arguments.
We suggest putting the logic to draw the matrix into a separate createGame() method,
which we then call from the initialize method(). Run the program and see what happens.

Hint: use loops to call the setCellColor(int, int, Color) method for each cell of the matrix.



