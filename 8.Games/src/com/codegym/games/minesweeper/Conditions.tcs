taskKey="com.codegym.games.minesweeper.part08"\n\nMinesweeper (Part 8/16)

The rules of the game provide flags to help the player. They are needed to
mark cells that might be mined. Accordingly, the number of flags (countFlags) must be equal to
the number of mines (countMinesOnField). You need to show flags somehow on the playing field. To do this, we'll create
a constant to hold the symbol that represents them. Each cell in the model must have an
isFlag field that will tell us whether a cell is flagged.


Requirements:
1.	The MinesweeperGame class must have a private static final String FLAG field that is initialized when it is declared. For example, you can use the UTF-16 symbol for a flag: &quot;\uD83D\uDEA9&quot;.
2.	The MinesweeperGame class must have a private int countFlags field that stores the number of unused flags.
3.	The createGame() method must set the countFlags field equal to countMinesOnField.
4.	The GameObject class must have a public boolean isFlag field.


Minesweeper (Part 7/16)

At this stage, we'll deal with the logic to reveal cells. Let's create a corresponding method
and a variable that will store the cell state (revealed or hidden). When revealing a cell, the method will:
- draw a mine in the cell if it contains a mine;
- display the number of mined neighbors if the cell does not contain a mine;
- mark the cell as revealed in the model;
- change the cell color.
For convenience, we suggest adding the mine symbol to a separate constant. When the a cell be revealed? Correct!
When you click on it with the left mouse button. To handle this click event, the engine has a special method: onMouseLeftClick(int, int).
Let's override it in our class. It will call the method that reveals a cell.
And, of course, run the program and enjoy the results of your work.



Minesweeper (Part 6/16)

Now let's count the mines in adjacent cells. To do this, we'll add a field to each cell of the matrix,
which will be responsible for the number of mined neighbors. First, we find all the neighbors,
and then we count how many of them are mined.
To get the list of neighbors, you now have the getNeighbors() method, which has one GameObject (cell) parameter.
Your task is to, in a separate method, count the number of mined neighbors for each cell in gameField
and assign this value to the appropriate field of the cell.
Although your work is not visible (you started program to see what happens, right?), it is very important to future steps.



Minesweeper (Part 5/16)

Minesweeper is aptly named. The player has to deal with mines, though maybe it would be best for the player to stay far away from them :)
Let's add these mines to the game. To do this, we'll adapt the GameObject class to account
for the fact that a cell can be a mine (by adding the isMine flag).
Don't create a new constructor: editing the existing constructor will suffice.
Additionally, when creating the cells, add code that generates mines with a probability of 10%. The easiest way is
to use the Game class's getRandomNumber(int n) method, which returns a random number from
0 to n-1 inclusive. Therefore, the probability of generating a certain number is 1/n.
And don't forget to count the number of generated mines in the MinesweeperGame class.
Once you've done all that, run the program and check that nothing is broken :)



Minesweeper (Part 4/16)

We need to store the state of the playing field's cells somewhere.
To do this, create a matrix (two-dimensional array) with the dimensions of the playing field.
Populate the matrix with GameObject objects using this formula:
gameField[y][x] = new GameObject(x, y);

Now let's display all the cells on the screen.
The Game class's setCellColor(int, int, Color) method, whose parameters are the cell coordinates and color, will help us accomplish this.
Call it for each cell and pass the cell coordinates and any color (for example, Color.ORANGE) as arguments.
We suggest putting the logic to draw the matrix into a separate createGame() method,
which we then call from the initialize method(). Run the program and see what happens.

Hint: use loops to call the setCellColor(int, int, Color) method for each cell of the matrix.



Minesweeper (Part 3/16)

Because our game will use game objects (cells), we'll create a separate GameObject class
to describe them. Let's think about what the game object needs. Naturally, we need
its x and y coordinates on the playing field. And how can we get by without a constructor? After you do everything,
don't forget to run the program and look at the result.



