taskKey="com.codegym.games.spaceinvaders.part15"\n\nSpace Invaders (Part 15/34)

We'll store all the enemy projectiles in an enemyBullets field in the SpaceInvadersGame class. We'll add code to draw and move them in appropriate methods.
To remove projectiles that are no longer relevant, we'll create and implement a removeDeadBullets() method in the SpaceInvadersGame class.
To remove the projectiles, you can either use an iterator, or create a copy of the enemyBullets list and run through it in a loop.
If we determine that a projectile needs to be removed, we'll call enemyBullets.remove(bullet).
Projectiles are irrelevant if they have flown off the screen or if they have hit their target (isAlive == false).
Let's add a check() helper function. At this stage, it will call the removeDeadBullets() method. Later, it will perform various checks at each step of the game.
We'll call the fire() method on the fleet with the same frequency, potentially causing an enemy ship to fire.
If a shot is fired, the method returns a projectile, which must be added to the list.


Requirements:
1.	The SpaceInvadersGame class must have a private List&lt;Bullet&gt; enemyBullets field.
2.	In the createGame() method, the enemyBullets field must be initialized with a new ArrayList&lt;Bullet&gt; object before the call to the drawScene() method.
3.	In the drawScene() method, the draw(Game) method must be called on each object in the enemyBullets list after the call to the drawField() method. Pass &quot;this&quot; to the method.
4.	The moveSpaceObjects() method must call the move() method on each object in the enemyBullets list.
5.	The SpaceInvadersGame class must have a private void removeDeadBullets() method.
6.	In the removeDeadBullets() method, you need to remove all &quot;dead&quot; projectiles and projectiles that have flown off the screen (y coordinate is greater than or equal to HEIGHT - 1) from the enemyBullets list.
7.	The SpaceInvadersGame class must have a private void check() method.
8.	In the check() method, you need to call the removeDeadBullets() method.
9.	In the SpaceInvadersGame class&#39;s onTurn(int) method, you need to call the check() method before the call to the drawScene() method.
10.	In the onTurn(int) method, you need to call the fire(Game) method with this as an argument on the enemyFleet object before the call to the drawScene() method.
11.	If the value returned by calling the fire(Game) method on the enemyFleet object is not null, you need to add the return value to the enemyBullets list. Add it before the call to the drawScene() method.


Space Invaders (Part 14/34)

Let's create and implement a fire() method for the EnemyFleet class. This method will call the fire on a randomly selected ship in the fleet.
Additionally, the probability that the fleet will fire will be determined by the value of the DIFFICULTY field.



Space Invaders (Part 13/34)

Let's introduce a DIFFICULTY variable responsible for the game's difficulty, specifically the probability that an enemy ship will fire in a step of the game.
All ships should be able to fire, so we'll add a fire method to the Ship class.
We won't create any instances of this class, so this method will be a "stub". We'll implement it in child classes.
To make a projectile fly out of the front cannon, you need to pass the right coordinates to the constructor.



Space Invaders (Part 12/34)

We'll create a Bullet class responsible for the projectiles. This class's constructor will take x and y coordinates and a direction.
The constructor will also call the setMatrix method with the projectile's matrix (ShapeMatrix.BULLET), which you can find in the ShapeMatrix class.
Because the projectiles only fly up or down, only the y coordinate changes. We'll add a dy variable, which will be responsible for the magnitude of change in the y coordinate.
During upward flight, dy is negative. When flying down, it is positive. As a result, all we need to do in the move method is increase the y coordinate by dy.
We'll declare an isAlive variable that will indicate whether the projectile is "alive".
When created, it is "alive", but it "dies" if it hits an opponent's ship.
We'll implement this behavior later.



Space Invaders (Part 11/34)

When the ships reach the edge of the screen, they begin to move in the opposite direction and drop lower.
To achieve this, we need to implement the EnemyFleet class's move method.



Space Invaders (Part 10/34)

According to the rules of the game, the fewer ships there are, the faster they move from side to side.
We'll implement this relationship in the getSpeed method. Note that the enemy ships' speed must not exceed 2.
We'll also give the EnemyFleet class a direction field and a move method.
We'll need to give the SpaceInvadersGame class a moveSpaceObjects method. That's where we'll move objects.
The ships move at each step of the game, so the moveSpaceObjects method must be called in the onTurn method.
To immediately see the movement on the screen, you need to call the moveSpaceObjects method before redrawing the screen.



