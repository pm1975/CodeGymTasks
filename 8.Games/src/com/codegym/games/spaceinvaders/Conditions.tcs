taskKey="com.codegym.games.spaceinvaders.part14"\n\nSpace Invaders (Part 14/34)

Let's create and implement a fire() method for the EnemyFleet class. This method will call the fire on a randomly selected ship in the fleet.
Additionally, the probability that the fleet will fire will be determined by the value of the DIFFICULTY field.


Requirements:
1.	The EnemyFleet class must have a public Bullet fire(Game) method.
2.	The EnemyFleet class&#39;s fire(Game) method must return null if there are no enemy ships in the ships list.
3.	The EnemyFleet class&#39;s fire(Game) method must call the getRandomNumber(int) method on the Game object with the argument (100 / SpaceInvadersGame.DIFFICULTY).
4.	The EnemyFleet class&#39;s fire(Game) method must return null if the call to the getRandomNumber(int) method on the Game object with the argument (100 / SpaceInvadersGame.DIFFICULTY) returns a value greater than zero.
5.	The EnemyFleet class&#39;s fire(Game) method must call the getRandomNumber(int) method on the Game object with an argument equal to the number of enemy ships in the ships list.
6.	The EnemyFleet class&#39;s fire(Game) method must call the fire() method on the ship in the ships list whose index is equal to the value returned by game.getRandomNumber(ships.size()).
7.	The EnemyFleet class&#39;s fire(Game) method must return the value returned by calling the fire() method on the enemy ship.


Space Invaders (Part 13/34)

Let's introduce a DIFFICULTY variable responsible for the game's difficulty, specifically the probability that an enemy ship will fire in a step of the game.
All ships should be able to fire, so we'll add a fire method to the Ship class.
We won't create any instances of this class, so this method will be a "stub". We'll implement it in child classes.
To make a projectile fly out of the front cannon, you need to pass the right coordinates to the constructor.



Space Invaders (Part 12/34)

We'll create a Bullet class responsible for the projectiles. This class's constructor will take x and y coordinates and a direction.
The constructor will also call the setMatrix method with the projectile's matrix (ShapeMatrix.BULLET), which you can find in the ShapeMatrix class.
Because the projectiles only fly up or down, only the y coordinate changes. We'll add a dy variable, which will be responsible for the magnitude of change in the y coordinate.
During upward flight, dy is negative. When flying down, it is positive. As a result, all we need to do in the move method is increase the y coordinate by dy.
We'll declare an isAlive variable that will indicate whether the projectile is "alive".
When created, it is "alive", but it "dies" if it hits an opponent's ship.
We'll implement this behavior later.



Space Invaders (Part 11/34)

When the ships reach the edge of the screen, they begin to move in the opposite direction and drop lower.
To achieve this, we need to implement the EnemyFleet class's move method.



Space Invaders (Part 10/34)

According to the rules of the game, the fewer ships there are, the faster they move from side to side.
We'll implement this relationship in the getSpeed method. Note that the enemy ships' speed must not exceed 2.
We'll also give the EnemyFleet class a direction field and a move method.
We'll need to give the SpaceInvadersGame class a moveSpaceObjects method. That's where we'll move objects.
The ships move at each step of the game, so the moveSpaceObjects method must be called in the onTurn method.
To immediately see the movement on the screen, you need to call the moveSpaceObjects method before redrawing the screen.



Space Invaders (Part 9/34)

Everything will move in the game, which means that we need to specify the direction in which objects are moving. It is convenient to store directions in an enum.
We'll describe the motion of an enemy ship in the move() method. The method will change the appropriate coordinate depending on direction and speed.
The downward speed will be a constant 2. Because the enemy fleet moves back and forth between edges of the playing field, we need to watch for when the fleet reaches the edges.



