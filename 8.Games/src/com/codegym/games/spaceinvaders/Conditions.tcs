taskKey="com.codegym.games.spaceinvaders.part30"\n\nSpace Invaders (Part 30/34)

Now we'll teach the boss to shoot. Depending on the animation frame, the boss will shoot from different cannons.
We'll also override the kill() method, where we'll set the value of the isAlive field and set the frames of the explosion animation.


Requirements:
1.	In the Boss class, the fire() method of the EnemyShip parent class must be overridden.
2.	The fire() method must return null if the boss is &quot;dead&quot;.
3.	The fire() method must return a new Bullet object.
4.	In the fire() method, if matrix == ShapeMatrix.BOSS_ANIMATION_FIRST, you need to call the Bullet class&#39;s constructor with the following arguments: x + 6, y + height, Direction.DOWN.
5.	In the fire() method, if matrix != ShapeMatrix.BOSS_ANIMATION_FIRST, you need to call the Bullet class&#39;s constructor with the following arguments: x, y + height, Direction.DOWN.
6.	In the Boss class, the kill() method of the EnemyShip parent class must be overridden.
7.	The kill() method must not do anything if the boss is &quot;dead&quot;.
8.	The kill() method must set the isAlive field to false.
9.	In the kill() method, you need to call the base class&#39;s setAnimatedView(int[][]...) method with the following arguments: ShapeMatrix.KILL_BOSS_ANIMATION_FIRST, ShapeMatrix.KILL_BOSS_ANIMATION_SECOND, ShapeMatrix.KILL_BOSS_ANIMATION_THIRD.


Space Invaders (Part 29/34)

It's time to create the enemy boss. To make him look tougher, we'll add an animation when he moves.
If the animation changes with every step, it will move too quickly.
To create the desired effect, you need to change the frame once every 10 steps.
That's why we need to override the nextFrame method and add a frameCount variable that will count steps.



Space Invaders (Part 28/34)

At this stage, we'll add a checkHit(List<Bullet> bullets) method for checking whether the player's projectile has hit an enemy ship.
After a hit, we need to "kill" the corresponding projectile and enemy ship. Additionally, we'll add a deleteHiddenShips()
method that will remove "hidden" ships from the list. To remove the ships, you can either use an iterator, or create a copy of the ships list
and run through it in a loop. If we determine that a ship needs to be removed, we'll call ships.remove(ship).
The checkHit(List<Bullet> bullets) and deleteHiddenShips() methods must be called in the SpaceInvadersGame class's check() method.



Space Invaders (Part 27/34)

Let's override the method for destroying an enemy ship. It sets the isAlive field to false and sets the destruction animation matrix.
We'll also create an isVisible() method in the Ship class.
It will return false after the entire animation has been displayed for a "dead" ship.



Space Invaders (Part 26/34)

In this part of the project, we'll add the ability to shoot by pressing the spacebar.
The player's newly created projectiles are added to the playerBullets list, while those that have flown off the screen are removed from it.
To remove the projectiles, you can either use an iterator, or create a copy of the playerBullets list and run through it in a loop.
If we determine that a projectile needs to be removed, we'll call playerBullets.remove(bullet).
To make the game a little harder, we'll also limit the number of projectiles the player can have on the screen. For convenience, we'll put this number in a variable.
We'll override the Game class's setCellValueEx method so that it only works with valid coordinates.



Space Invaders (Part 25/34)

Now we'll prepare to give the player the ability to shoot. For this, we need a fire() method that will create projectiles.
We will store them in the playerBullets list. Add logic to draw projectiles in the drawScene method, and to move them â€” in the moveSpaceObjects method.
Now all that remains is to implement the ability to shoot using key presses. We'll work on this in the next part of the project.



