taskKey="com.codegym.games.spaceinvaders.part08"\n\nSpace Invaders (Part 8/34)

Let's continue working on the enemy fleet. To do this, we need to fill the ships list in the createShips() method.
Keep in mind that the best distance from the top of the screen to the top row of ships is 12 cells.
To add the enemy fleet to the game, we'll create an enemyFleet field in the SpaceInvadersGame class and initialize it to a new EnemyFleet object.
The enemy ships are created when the createShips method is called in the EnemyFleet constructor.
The game is dynamic, so we'll need to regularly redraw the screen and perform other actions. Everything that happens at each step is performed in the onTurn(int) method.
We'll use the setTurnTimer method to set how often this method is called. It takes an argument that determines how long each step is in milliseconds.
In other words, given a step of 40 ms (0.04 second), the onTurn method will be called 25 times per second (1 / 0.04 second).
If you've done everything correctly, you'll see the enemy fleet when you run the program.


Requirements:
1.	In the EnemyFleet class&#39;s createShips() method, you need to create ROWS_COUNT * COLUMNS_COUNT enemy ships and add them to the ships list.
2.	Each enemy ship must be created with the arguments: x * STEP, y * STEP + 12, where x is a loop counter from 0 (including 0) to COLUMNS_COUNT (not including COLUMNS_COUNT), and y is a loop counter from 0 (including 0) to ROWS_COUNT (not including ROWS_COUNT).
3.	The EnemyFleet class must have one public no-argument constructor.
4.	The EnemyFleet class&#39;s constructor must call the createShips() method.
5.	The EnemyFleet class must have a public void draw(Game game) method.
6.	In the draw(Game game) method, call the draw(Game) method on each enemy ship in the ships list. Pass game as the argument.
7.	The SpaceInvadersGame class must have a private EnemyFleet enemyFleet field.
8.	The enemyFleet field must be initialized with a new EnemyFleet object in the createGame() method before the call to the drawScene() method.
9.	In the drawScene() method, the draw(Game) method must be called on the enemyFleet object after the call to the drawField() method. Pass &quot;this&quot; to the method.
10.	In the SpaceInvadersGame class, the onTurn(int) method of the Game parent class must be overridden.
11.	The drawScene() method must be called in the onTurn(int) method.
12.	In the SpaceInvadersGame class&#39;s createGame() method, the Game class&#39;s setTurnTimer(int) method must be called with 40 as the argument.
13.	The EnemyFleet class must import the com.codegym.engine.cell.Game class.


Space Invaders (Part 7/34)

In this part of the project, we'll prepare the foundation for the enemy fleet. To do this, we'll create an EnemyFleet class.
It will store the list of ships, number of rows of ships (ROWS_COUNT), number of ships per row (COLUMNS_COUNT),
and distance between left corners of adjacent ships (STEP). We'll create the ships and add them to the ships list in the createShips method,
which we will implement later.



Space Invaders (Part 6/34)

Now we'll create a Ship class that will store properties that all spaceships share. It will have a setStaticView method that at present will set a matrix.
Later, it will set an animation. First, we make a class for ships in the enemy's fleet: EnemyShip. We've provided its matrix for you in the ShapeMatrix class.



Space Invaders (Part 5/34)

Stars aren't the only objects in this game. We will also need spaceships, of course! A game object's appearance is determined by a matrix,
so we'll add a matrix field to the GameObject class. In addition to the object's outline, the matrix contains the ordinals of colors
in the com.codegym.engine.cell.Color enum. We'll put the object's dimensions into separate width and height fields. To draw a game object on the screen,
we'll create a draw(Game game) method. For each cell in the matrix, we'll have this method call the setCellValueEx(int x, int y, Color color, String text)
method on the Game object passed to it as an argument. To draw the matrix on the playing field, we need to consider the x and y coordinates of the GameObject object.
These coordinates are the coordinates of the upper left cell of the matrix on the playing field.

For example:


As you can see from the example, the upper left corner of the game object's matrix has coordinates x = 2 and y = 4 on the playing field.
However, relative to its own matrix, these coordinates are x = 0 and y = 0. Accordingly, the setCellValueEx method will be passed the coordinates
of the upper left corner of the game object's matrix on the playing field + the coordinates of the cell within the game object's matrix (x = 2 + 0, y = 4 + 0).

For example:
game.setCellValueEx(x of the object on the playing field + x in the matrix, y of the object on the playing field + y in the matrix, color, empty string);
Note that color is the color of the cell in the object's matrix. You can get it like this: Color.values()[matrix[i][j]],
where i is the y coordinate in matrix and j is the x coordinate in matrix.



Space Invaders (Part 4/34)

We can use any Unicode symbol to represent stars. We'll store it in the Star class's STAR_SIGN field.
To draw stars on the playing field, we'll create a draw(Game) method. We'll have it call the setCellValueEx method on the Game object passed to it as an argument.
We'll pass the star's coordinates, background color, symbol, color, and size to the setCellValueEx method. Note that the star's x and y coordinates are doubles,
so you need to convert them to int when calling the setCellValueEx method. To add stars to the game, we'll create a list of stars and a method that will fill
the list with new stars. And to draw the stars on the playing field, you need to call the draw(Game) method on each star after drawing the playing field.



Space Invaders (Part 3/34)

Let's implement the drawField() method, which will paint the playing field a single color.
To do this, we need to set a color and the empty string on each cell. The Game class's setCellValueEx(int, int, Color, String) method will help us.
The first two parameters are the cell's x and y coordinates, the third is the background color, and the last is the cell's text,
which is displayed on the playing field. You can find a list of available colors in the game engine's com.codegym.engine.cell.Color enum.
We don't need any cell text, so we'll pass an empty string.
For example, to make the cell with coordinates x = 0 and y = 2 black, you need to call setCellValueEx(0, 2, Color.BLACK, "").
To paint all the cells rather than just one, we need to set the color and text of each cell in each row of the playing field. Loops will help us do this.

For example:
for (int y = 0; y < height of the playing field; y++) {
for (int x = 0; x < width of the playing field; x++) {
setCellValueEx(x, y, cell color, empty string);
}
}

The game involves different game objects, so we'll put their common characteristics, such as the coordinates of their location on the playing field,
into the GameObject parent class. We'll create a separate gameobjects package for all the classes representing game objects.
Our first game objects will be stars. We'll create a Star class in the gameobjects package and make it inherit the GameObject class.



