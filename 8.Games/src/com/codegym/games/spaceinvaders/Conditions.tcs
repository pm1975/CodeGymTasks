taskKey="com.codegym.games.spaceinvaders.part27"\n\nSpace Invaders (Part 27/34)

Let's override the method for destroying an enemy ship. It sets the isAlive field to false and sets the destruction animation matrix.
We'll also create an isVisible() method in the Ship class.
It will return false after the entire animation has been displayed for a "dead" ship.


Requirements:
1.	In the EnemyShip class, the kill() method of the Ship parent class must be overridden.
2.	The kill() method must not do anything if the ship is &quot;dead&quot;.
3.	The kill() method must set the isAlive field to false.
4.	In the kill() method, you need to call the base class&#39;s setAnimatedView(int[][]...) method with the following arguments: ShapeMatrix.KILL_ENEMY_ANIMATION_FIRST, ShapeMatrix.KILL_ENEMY_ANIMATION_SECOND, ShapeMatrix.KILL_ENEMY_ANIMATION_THIRD.
5.	The Ship class must have a public boolean isVisible() method.
6.	The isVisible() must return false if the ship is &quot;dead&quot; AND frameIndex is greater than or equal to the number of objects in the frame list. Otherwise, it should return true.


Space Invaders (Part 26/34)

In this part of the project, we'll add the ability to shoot by pressing the spacebar.
The player's newly created projectiles are added to the playerBullets list, while those that have flown off the screen are removed from it.
To remove the projectiles, you can either use an iterator, or create a copy of the playerBullets list and run through it in a loop.
If we determine that a projectile needs to be removed, we'll call playerBullets.remove(bullet).
To make the game a little harder, we'll also limit the number of projectiles the player can have on the screen. For convenience, we'll put this number in a variable.
We'll override the Game class's setCellValueEx method so that it only works with valid coordinates.



Space Invaders (Part 25/34)

Now we'll prepare to give the player the ability to shoot. For this, we need a fire() method that will create projectiles.
We will store them in the playerBullets list. Add logic to draw projectiles in the drawScene method, and to move them â€” in the moveSpaceObjects method.
Now all that remains is to implement the ability to shoot using key presses. We'll work on this in the next part of the project.



Space Invaders (Part 24/34)

When you release the left key or the right key, the ship does not stop moving until it hits the edge of the playing field. Let's fix that.
We'll override the Game class's onKeyReleased() method. This method is called when keys are released.
If the player's ship is moving, the onKeyReleased(Key) method changes the player's direction to Direction.UP and, as a result, the ship stops moving.



Space Invaders (Part 23/34)

In this part of the project, we'll move the player's ship. Keep in mind that the ship must not leave the playing field.
To move the ship with the other objects, you need to call the move() method in the moveSpaceObjects() method of the game's main class.



Space Invaders (Part 22/34)

Let's add a new property to the player's ship: direction. We'll set it through a setter method. The ship can move in two directions: left or right.
But it can also hold still, so we'll use "up" to represent this state. The ship isn't moving when the game starts,
so we'll set the ship's default direction to "up". To read the player's commands (key presses), we'll override the Game parent class's
onKeyPress(Key) method. When the player presses left or right, this method will set the corresponding direction on the ship.
We'll also implement the ability to restart a stopped game by pressing the SPACE key.



