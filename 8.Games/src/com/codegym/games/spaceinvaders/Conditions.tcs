taskKey="com.codegym.games.spaceinvaders.part04"\n\nSpace Invaders (Part 4/34)

We can use any Unicode symbol to represent stars. We'll store it in the Star class's STAR_SIGN field.
To draw stars on the playing field, we'll create a draw(Game) method. We'll have it call the setCellValueEx method on the Game object passed to it as an argument.
We'll pass the star's coordinates, background color, symbol, color, and size to the setCellValueEx method. Note that the star's x and y coordinates are doubles,
so you need to convert them to int when calling the setCellValueEx method. To add stars to the game, we'll create a list of stars and a method that will fill
the list with new stars. And to draw the stars on the playing field, you need to call the draw(Game) method on each star after drawing the playing field.


Requirements:
1.	The Star class must have a private static final String STAR_SIGN field that is initialized when it is declared. For example, we can use the UTF-8 character &quot;\u2605&quot;.
2.	The Star class must have a public void draw(Game) method.
3.	The draw(Game) method must call the setCellValueEx(int, int, Color, String, Color, int) method on a Game object with the following arguments: x, y, Color.NONE, STAR_SIGN, &lt;star color&gt;, 100. (for &lt;star color&gt;, use any color want, such as Color.WHITE).
4.	The SpaceInvadersGame class must have a private List&lt;Star&gt; stars field.
5.	The SpaceInvadersGame class must have a private void createStars() method.
6.	The stars field must be initialized with a new ArrayList&lt;Star&gt; object in the createStars() method.
7.	In the createStars() method, you need to add 8 new Star objects to the stars list. You choose each star&#39;s coordinates within the bounds of the playing field.
8.	The createStars() method must be called before the drawScene() method in the createGame() method.
9.	In the drawField(Game) method, call the draw(Game) method on each object in the stars list. Pass &quot;this&quot; to the method.
10.	The Star class must have a statement that imports the entire contents of the com.codegym.engine.cell package.


Space Invaders (Part 3/34)

Let's implement the drawField() method, which will paint the playing field a single color.
To do this, we need to set a color and the empty string on each cell. The Game class's setCellValueEx(int, int, Color, String) method will help us.
The first two parameters are the cell's x and y coordinates, the third is the background color, and the last is the cell's text,
which is displayed on the playing field. You can find a list of available colors in the game engine's com.codegym.engine.cell.Color enum.
We don't need any cell text, so we'll pass an empty string.
For example, to make the cell with coordinates x = 0 and y = 2 black, you need to call setCellValueEx(0, 2, Color.BLACK, "").
To paint all the cells rather than just one, we need to set the color and text of each cell in each row of the playing field. Loops will help us do this.

For example:
for (int y = 0; y < height of the playing field; y++) {
for (int x = 0; x < width of the playing field; x++) {
setCellValueEx(x, y, cell color, empty string);
}
}

The game involves different game objects, so we'll put their common characteristics, such as the coordinates of their location on the playing field,
into the GameObject parent class. We'll create a separate gameobjects package for all the classes representing game objects.
Our first game objects will be stars. We'll create a Star class in the gameobjects package and make it inherit the GameObject class.



Space Invaders (Part 2/34)

Everything in the game happens in outer space. To draw this setting, let's declare a drawField() method.
We'll create all the elements of the game in the createGame() method, and we'll draw them in the drawScene() method.
All objects are created when the game starts, so the initialize() method will call setScreenSize(int, int) and then createGame().



Space Invaders (Part 1/34)

Today we invite you to write an exciting game â€” Space Invaders. As always, we'll start with the rules.

The object of the game is for the player to destroy every alien spaceship.
The player controls a laser cannon and can move it left and right at the bottom of the screen.
The player has an unlimited supply of "laser projectiles". When the player hits an alien ship, he or she kills it and receives some points.
When the game begins, the alien ships are located at the top of the screen. They move horizontally and, upon reaching the edge of the playing field,
descend to the next row, gradually getting closer to the player.
As the number of alien ships decreases, the remaining ships begin to move faster.
After all the aliens are destroyed, the player wins.
The aliens try to destroy the player's cannon by shooting at it. If an alien hits the cannon, the player loses.
If even one alien reaches the bottom of the screen, the alien invasion succeeds and the game ends.
A "boss" is located above the rows of alien ships. If the player destroys the boss, he or she receives bonus points.
Let's begin. To start, we'll need a SpaceInvadersGame class that inherits the Game class. It has methods that will help us write the game.

Now we'll set up the playing field. To start the game, we need to override the initialize() method, which in turn must call the setScreenSize(int, int) method.

This method sets the playing field's width and height, which it takes as arguments. We'll store them in variables.

To complete the Space Invaders task successfully, we recommend that you read this article about the "Games" section.
It contains information that you'll find helpful when writing games.



