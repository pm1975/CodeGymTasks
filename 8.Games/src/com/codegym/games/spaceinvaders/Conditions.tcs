taskKey="com.codegym.games.spaceinvaders.part18"\n\nSpace Invaders (Part 18/34)

At this stage, we'll prepare an animation for when a ship explodes. To do this, we need a List<int[][]> frames field,
which will store a list of matrices representing the animation frames.
We'll also need a frameIndex field that stores the index of the current animation frame.
We'll set the animation frames in the setAnimatedView method. It takes an array of frames (matrices) and puts them in the frames list.
Finally, we'll implement the setStaticView method, which sets the ship's initial matrix.


Requirements:
1.	The Ship class must have a private List&lt;int[][]&gt; frames field.
2.	The Ship class must have a private int frameIndex field.
3.	The Ship class must have a public void setAnimatedView(int[][]... viewFrames) method.
4.	The setAnimatedView(int[][]... viewFrames) method must call the base class&#39;s setMatrix(int[][]) method. Pass viewFrames[0] to the method.
5.	The frames field must be initialized to Arrays.asList(viewFrames) in the setAnimatedView(int[][]... viewFrames) method.
6.	In the setAnimatedView(int[][]... viewFrames) method, you need to set the frameIndex field to 0.
7.	The frames field must be initialized to a new ArrayList&lt;int[][]&gt; object in the setStaticView(int[][] viewFrame) method.
8.	In the setStaticView(int[][] viewFrame) method, you need to add the viewFrame object to the frames list.
9.	In the setStaticView(int[][]) method, you need to set the frameIndex field to 0.


Space Invaders (Part 17/34)

We'll give the PlayerShip class a method that checks whether enemy projectiles have hit the player's ship (the isCollision() method in the GameObject class).
If there is a hit, it will "kill" the ship and the projectile. We'll also add the player's ship to the class.
We'll draw it and add the collision check in the appropriate method.



Space Invaders (Part 16/34)

Now we'll create the player's ship. We need the PlayerShip class for this. Its constructor will set the ship's coordinates so that
the ship is displayed centered at the bottom of the screen. The constructor sets the ship's appearance by setting the PLAYER matrix,
which we've provided for you in the ShapeMatrix class. A ship can have two states: "alive" or "dead". To represent these states,
we'll add an isAlive field to the Ship parent class. When a projectile hits a ship, they (the projectile and the ship) are destroyed,
so we'll add a kill method. When it is called, we'll "kill" the ship and the projectile.



Space Invaders (Part 15/34)

We'll store all the enemy projectiles in an enemyBullets field in the SpaceInvadersGame class. We'll add code to draw and move them in appropriate methods.
To remove projectiles that are no longer relevant, we'll create and implement a removeDeadBullets() method in the SpaceInvadersGame class.
To remove the projectiles, you can either use an iterator, or create a copy of the enemyBullets list and run through it in a loop.
If we determine that a projectile needs to be removed, we'll call enemyBullets.remove(bullet).
Projectiles are irrelevant if they have flown off the screen or if they have hit their target (isAlive == false).
Let's add a check() helper function. At this stage, it will call the removeDeadBullets() method. Later, it will perform various checks at each step of the game.
We'll call the fire() method on the fleet with the same frequency, potentially causing an enemy ship to fire.
If a shot is fired, the method returns a projectile, which must be added to the list.



Space Invaders (Part 14/34)

Let's create and implement a fire() method for the EnemyFleet class. This method will call the fire on a randomly selected ship in the fleet.
Additionally, the probability that the fleet will fire will be determined by the value of the DIFFICULTY field.



Space Invaders (Part 13/34)

Let's introduce a DIFFICULTY variable responsible for the game's difficulty, specifically the probability that an enemy ship will fire in a step of the game.
All ships should be able to fire, so we'll add a fire method to the Ship class.
We won't create any instances of this class, so this method will be a "stub". We'll implement it in child classes.
To make a projectile fly out of the front cannon, you need to pass the right coordinates to the constructor.



