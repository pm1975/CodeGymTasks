taskKey="com.codegym.games.spaceinvaders.part28"\n\nSpace Invaders (Part 28/34)

At this stage, we'll add a checkHit(List<Bullet> bullets) method for checking whether the player's projectile has hit an enemy ship.
After a hit, we need to "kill" the corresponding projectile and enemy ship. Additionally, we'll add a deleteHiddenShips()
method that will remove "hidden" ships from the list. To remove the ships, you can either use an iterator, or create a copy of the ships list
and run through it in a loop. If we determine that a ship needs to be removed, we'll call ships.remove(ship).
The checkHit(List<Bullet> bullets) and deleteHiddenShips() methods must be called in the SpaceInvadersGame class's check() method.


Requirements:
1.	The EnemyFleet class must have a public void checkHit(List&lt;Bullet&gt; bullets) method.
2.	In the checkHit(List&lt;Bullet&gt; bullets) method, you need to use the isCollision(GameObject) method to check whether each enemy ship in the ships list has collided with any of the projectiles in the bullets list.
3.	If a ship and projectile have collided (the isCollision(GameObject) method returns true) and the ship is &quot;alive&quot; and the projectile is &quot;alive&quot;, you need to call the kill() on them.
4.	The EnemyFleet class must have a public void deleteHiddenShips() method.
5.	The deleteHiddenShips() method must remove from the ships list all ships that are not visible on the playing field (ship.isVisible() == false).
6.	In the SpaceInvadersGame class&#39;s check() method, you need to call the checkHit(List&lt;Bullet&gt;) method with playerBullets as the argument on the enemyFleet object before the call to the removeDeadBullets() method.
7.	In the SpaceInvadersGame class&#39;s check() method, you need to call the deleteHiddenShips() method on the enemyFleet object after the checkHit(List&lt;Bullet&gt;) method.


Space Invaders (Part 27/34)

Let's override the method for destroying an enemy ship. It sets the isAlive field to false and sets the destruction animation matrix.
We'll also create an isVisible() method in the Ship class.
It will return false after the entire animation has been displayed for a "dead" ship.



Space Invaders (Part 26/34)

In this part of the project, we'll add the ability to shoot by pressing the spacebar.
The player's newly created projectiles are added to the playerBullets list, while those that have flown off the screen are removed from it.
To remove the projectiles, you can either use an iterator, or create a copy of the playerBullets list and run through it in a loop.
If we determine that a projectile needs to be removed, we'll call playerBullets.remove(bullet).
To make the game a little harder, we'll also limit the number of projectiles the player can have on the screen. For convenience, we'll put this number in a variable.
We'll override the Game class's setCellValueEx method so that it only works with valid coordinates.



Space Invaders (Part 25/34)

Now we'll prepare to give the player the ability to shoot. For this, we need a fire() method that will create projectiles.
We will store them in the playerBullets list. Add logic to draw projectiles in the drawScene method, and to move them â€” in the moveSpaceObjects method.
Now all that remains is to implement the ability to shoot using key presses. We'll work on this in the next part of the project.



Space Invaders (Part 24/34)

When you release the left key or the right key, the ship does not stop moving until it hits the edge of the playing field. Let's fix that.
We'll override the Game class's onKeyReleased() method. This method is called when keys are released.
If the player's ship is moving, the onKeyReleased(Key) method changes the player's direction to Direction.UP and, as a result, the ship stops moving.



Space Invaders (Part 23/34)

In this part of the project, we'll move the player's ship. Keep in mind that the ship must not leave the playing field.
To move the ship with the other objects, you need to call the move() method in the moveSpaceObjects() method of the game's main class.



