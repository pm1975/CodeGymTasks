taskKey="com.codegym.games.spaceinvaders.part23"\n\nSpace Invaders (Part 23/34)

In this part of the project, we'll move the player's ship. Keep in mind that the ship must not leave the playing field.
To move the ship with the other objects, you need to call the move() method in the moveSpaceObjects() method of the game's main class.


Requirements:
1.	The PlayerShip class must have a public void move() method.
2.	The move() method must not do anything if the isAlive field is false.
3.	In the move() method, if the direction field is equal to Direction.LEFT, the x coordinate must be decreased by one.
4.	In the move() method, if the direction field is equal to Direction.RIGHT, the x coordinate must be increased by one.
5.	In the move() method, if the x coordinate is less than zero, you need to set it to 0.
6.	In the move() method, if the sum of the x and width fields is greater than the width of the playing field (SpaceInvadersGame.WIDTH), you need to set the x coordinate to (SpaceInvadersGame.WIDTH - width).
7.	In the SpaceInvadersGame class&#39;s moveSpaceObjects() method, you need to call the move() method on the player&#39;s ship.


Space Invaders (Part 22/34)

Let's add a new property to the player's ship: direction. We'll set it through a setter method. The ship can move in two directions: left or right.
But it can also hold still, so we'll use "up" to represent this state. The ship isn't moving when the game starts,
so we'll set the ship's default direction to "up". To read the player's commands (key presses), we'll override the Game parent class's
onKeyPress(Key) method. When the player presses left or right, this method will set the corresponding direction on the ship.
We'll also implement the ability to restart a stopped game by pressing the SPACE key.



Space Invaders (Part 21/34)

The game ends when the player wins or loses. Let's implement the stopGame method, which will stop the game and display an appropriate message on the screen.
You decide on the exact wording of the messages about winning and losing. If a projectile hits a player, the explosion animation must be displayed before the game
is stopped. To do this, in the stopGameWithDelay method, we'll call the stopGame method with a delay.
In the check method, if the player is "dead", you need to call stopGameWithDelay to start a countdown to when the game will stop.



Space Invaders (Part 20/34)

We'll create the nextFrame method in the Ship class to switch to the next animation frame.
It sets the matrix field to the next animation frame, if possible.
We'll extend the functionality of the draw method by overriding it so that it calls the superclass's method
for drawing and the nextFrame method for changing animation frames.



Space Invaders (Part 19/34)

We'll implement logic to "kill" the player by overriding the kill() method. In addition to setting the isAlive flag to false,
it will add an animation of the ship's destruction.



Space Invaders (Part 18/34)

At this stage, we'll prepare an animation for when a ship explodes. To do this, we need a List<int[][]> frames field,
which will store a list of matrices representing the animation frames.
We'll also need a frameIndex field that stores the index of the current animation frame.
We'll set the animation frames in the setAnimatedView method. It takes an array of frames (matrices) and puts them in the frames list.
Finally, we'll implement the setStaticView method, which sets the ship's initial matrix.



