taskKey="com.codegym.games.spaceinvaders.part03"\n\nSpace Invaders (Part 3/34)

Let's implement the drawField() method, which will paint the playing field a single color.
To do this, we need to set a color and the empty string on each cell. The Game class's setCellValueEx(int, int, Color, String) method will help us.
The first two parameters are the cell's x and y coordinates, the third is the background color, and the last is the cell's text,
which is displayed on the playing field. You can find a list of available colors in the game engine's com.codegym.engine.cell.Color enum.
We don't need any cell text, so we'll pass an empty string.
For example, to make the cell with coordinates x = 0 and y = 2 black, you need to call setCellValueEx(0, 2, Color.BLACK, "").
To paint all the cells rather than just one, we need to set the color and text of each cell in each row of the playing field. Loops will help us do this.

For example:
for (int y = 0; y < height of the playing field; y++) {
for (int x = 0; x < width of the playing field; x++) {
setCellValueEx(x, y, cell color, empty string);
}
}

The game involves different game objects, so we'll put their common characteristics, such as the coordinates of their location on the playing field,
into the GameObject parent class. We'll create a separate gameobjects package for all the classes representing game objects.
Our first game objects will be stars. We'll create a Star class in the gameobjects package and make it inherit the GameObject class.


Requirements:
1.	In the drawField() method, call the setCellValueEx(int, int, Color, String) method with the following arguments for all the cells of the image: x, y, any color (for example, Color.BLACK), and an empty string.
2.	There must be a public GameObject class in a separate file in the gameobjects package.
3.	The GameObject class must have a public double x field.
4.	The GameObject class must have a public double y field.
5.	The GameObject class must have a public constructor with two double parameters that are used to initialize the x and y fields.
6.	There must be a public Star class in a separate file in the gameobjects package.
7.	The Star class must be a descendant of the GameObject class.
8.	The Star class must have a public constructor with two double parameters that calls the base class&#39;s constructor using these parameters.


Space Invaders (Part 2/34)

Everything in the game happens in outer space. To draw this setting, let's declare a drawField() method.
We'll create all the elements of the game in the createGame() method, and we'll draw them in the drawScene() method.
All objects are created when the game starts, so the initialize() method will call setScreenSize(int, int) and then createGame().



Space Invaders (Part 1/34)

Today we invite you to write an exciting game â€” Space Invaders. As always, we'll start with the rules.

The object of the game is for the player to destroy every alien spaceship.
The player controls a laser cannon and can move it left and right at the bottom of the screen.
The player has an unlimited supply of "laser projectiles". When the player hits an alien ship, he or she kills it and receives some points.
When the game begins, the alien ships are located at the top of the screen. They move horizontally and, upon reaching the edge of the playing field,
descend to the next row, gradually getting closer to the player.
As the number of alien ships decreases, the remaining ships begin to move faster.
After all the aliens are destroyed, the player wins.
The aliens try to destroy the player's cannon by shooting at it. If an alien hits the cannon, the player loses.
If even one alien reaches the bottom of the screen, the alien invasion succeeds and the game ends.
A "boss" is located above the rows of alien ships. If the player destroys the boss, he or she receives bonus points.
Let's begin. To start, we'll need a SpaceInvadersGame class that inherits the Game class. It has methods that will help us write the game.

Now we'll set up the playing field. To start the game, we need to override the initialize() method, which in turn must call the setScreenSize(int, int) method.

This method sets the playing field's width and height, which it takes as arguments. We'll store them in variables.

To complete the Space Invaders task successfully, we recommend that you read this article about the "Games" section.
It contains information that you'll find helpful when writing games.



