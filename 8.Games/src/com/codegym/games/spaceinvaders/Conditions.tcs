taskKey="com.codegym.games.spaceinvaders.part32"\n\nSpace Invaders (Part 32/34)

The game is lost not only if the player's ship is destroyed, but also if the enemy fleet reaches the player's ship.
To determine the coordinates of the lower edge of the enemy fleet, we'll add a getBottomBorder() method.
If all the enemies are destroyed, the player wins. For convenience, we'll add a getShipCount(), method that will return the number of ships remaining in the enemy fleet.
If the number is 0, you need to call the stopGameWithDelay() method and call the win() method on the playerShip object.
This method replaces the player's ship matrix with ShapeMatrix.WIN_PLAYER.
We'll check the number of ships remaining in the enemy fleet and whether they have reached the player's ship in the check() method.


Requirements:
1.	The EnemyFleet class must have a public double getBottomBorder() method.
2.	The getBottomBorder() method must return the largest (y + height) value of all of the enemy ships in the ships list.
3.	The EnemyFleet class must have a public int getShipCount() method.
4.	The getShipCount() method must return the number of enemy ships in the ships list.
5.	The PlayerShip class must have a public void win() method.
6.	The PlayerShip class&#39;s win() method must call the setStaticView(int[][]) method. Pass ShapeMatrix.WIN_PLAYER as the argument.
7.	In the SpaceInvadersGame class&#39;s check() method, you need to call the getBottomBorder() method on the enemyFleet object.
8.	If the value returned by the getBottomBorder() method is greater than or equal to playerShip.y, the check() method must call the kill() method on the playerShip object.
9.	In the SpaceInvadersGame class&#39;s check() method, you need to call the getShipCount() method on the enemyFleet object.
10.	If the value returned by the getShipCount() method is 0, the check() method must call the win() method on the playerShip object and call the SpaceInvadersGame class&#39;s stopGameWithDelay() method.


Space Invaders (Part 31/34)

Let's make the boss animate continuously. To do this, we need to give the setAnimatedView method an isLoopAnimation parameter responsible
for indicating whether the animation should loop. This parameter is used to properly set the loopAnimation field.
If the loopAnimation field is true, the nextFrame method repeats the frames by resetting frameIndex.
As a result, you need to refactor the parameters in places where the setAnimatedView method is called.



Space Invaders (Part 30/34)

Now we'll teach the boss to shoot. Depending on the animation frame, the boss will shoot from different cannons.
We'll also override the kill() method, where we'll set the value of the isAlive field and set the frames of the explosion animation.



Space Invaders (Part 29/34)

It's time to create the enemy boss. To make him look tougher, we'll add an animation when he moves.
If the animation changes with every step, it will move too quickly.
To create the desired effect, you need to change the frame once every 10 steps.
That's why we need to override the nextFrame method and add a frameCount variable that will count steps.



Space Invaders (Part 28/34)

At this stage, we'll add a checkHit(List<Bullet> bullets) method for checking whether the player's projectile has hit an enemy ship.
After a hit, we need to "kill" the corresponding projectile and enemy ship. Additionally, we'll add a deleteHiddenShips()
method that will remove "hidden" ships from the list. To remove the ships, you can either use an iterator, or create a copy of the ships list
and run through it in a loop. If we determine that a ship needs to be removed, we'll call ships.remove(ship).
The checkHit(List<Bullet> bullets) and deleteHiddenShips() methods must be called in the SpaceInvadersGame class's check() method.



Space Invaders (Part 27/34)

Let's override the method for destroying an enemy ship. It sets the isAlive field to false and sets the destruction animation matrix.
We'll also create an isVisible() method in the Ship class.
It will return false after the entire animation has been displayed for a "dead" ship.



