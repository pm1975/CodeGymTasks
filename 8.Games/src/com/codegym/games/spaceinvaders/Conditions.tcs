taskKey="com.codegym.games.spaceinvaders.part22"\n\nSpace Invaders (Part 22/34)

Let's add a new property to the player's ship: direction. We'll set it through a setter method. The ship can move in two directions: left or right.
But it can also hold still, so we'll use "up" to represent this state. The ship isn't moving when the game starts,
so we'll set the ship's default direction to "up". To read the player's commands (key presses), we'll override the Game parent class's
onKeyPress(Key) method. When the player presses left or right, this method will set the corresponding direction on the ship.
We'll also implement the ability to restart a stopped game by pressing the SPACE key.


Requirements:
1.	The PlayerShip class must have a private Direction direction field that is initialized to Direction.UP when it is declared.
2.	The PlayerShip class must have a public setDirection() setter.
3.	The setDirection(Direction newDirection) setter must set the direction field to newDirection if newDirection is not equal to Direction.DOWN.
4.	In the SpaceInvadersGame class, the onKeyPress(Key) method of the Game parent class must be overridden.
5.	The onKeyPress(Key) method must call the createGame() method and do nothing more if the passed argument is Key.SPACE and the game is stopped (isGameStopped == true).
6.	The onKeyPress(Key) method must set the direction of the player&#39;s ship to Direction.LEFT if the method&#39;s parameter is equal to Key.LEFT.
7.	The onKeyPress(Key) method must set the direction of the player&#39;s ship to Direction.RIGHT if the method&#39;s parameter is equal to Key.RIGHT.


Space Invaders (Part 21/34)

The game ends when the player wins or loses. Let's implement the stopGame method, which will stop the game and display an appropriate message on the screen.
You decide on the exact wording of the messages about winning and losing. If a projectile hits a player, the explosion animation must be displayed before the game
is stopped. To do this, in the stopGameWithDelay method, we'll call the stopGame method with a delay.
In the check method, if the player is "dead", you need to call stopGameWithDelay to start a countdown to when the game will stop.



Space Invaders (Part 20/34)

We'll create the nextFrame method in the Ship class to switch to the next animation frame.
It sets the matrix field to the next animation frame, if possible.
We'll extend the functionality of the draw method by overriding it so that it calls the superclass's method
for drawing and the nextFrame method for changing animation frames.



Space Invaders (Part 19/34)

We'll implement logic to "kill" the player by overriding the kill() method. In addition to setting the isAlive flag to false,
it will add an animation of the ship's destruction.



Space Invaders (Part 18/34)

At this stage, we'll prepare an animation for when a ship explodes. To do this, we need a List<int[][]> frames field,
which will store a list of matrices representing the animation frames.
We'll also need a frameIndex field that stores the index of the current animation frame.
We'll set the animation frames in the setAnimatedView method. It takes an array of frames (matrices) and puts them in the frames list.
Finally, we'll implement the setStaticView method, which sets the ship's initial matrix.



Space Invaders (Part 17/34)

We'll give the PlayerShip class a method that checks whether enemy projectiles have hit the player's ship (the isCollision() method in the GameObject class).
If there is a hit, it will "kill" the ship and the projectile. We'll also add the player's ship to the class.
We'll draw it and add the collision check in the appropriate method.



